#!/bin/bash
#
# Kimengumi Command Line Interface Environnement
#
# Motd / Login banner
#
# Copyright 2017 Antonio Rossetti (https://www.kimengumi.fr)
#
# Licensed under the EUPL, Version 1.1 or – as soon they will be approved by
# the European Commission - subsequent versions of the EUPL (the "Licence");
# You may not use this work except in compliance with the Licence.
# You may obtain a copy of the Licence at:
#
# https://joinup.ec.europa.eu/software/page/eupl
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the Licence is distributed on an "AS IS" basis,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the Licence for the specific language governing permissions and
# limitations under the Licence.

# Check KCLIE env and load if necessary
if [ "x${KCLIE_PATH}" = "x" ] ; then
	source `dirname $0`/../env
fi

# OS dectection
case "${OSTYPE}" in
	*cygwin*)	WNIX='cygwin'	;;
	*darwin*)	WNIX='osx'	;;
	*linux*)	WNIX='linux'	;;
	* )		WNIX='other'	;;
esac
if [ "${WNIX}" = 'linux' ] && grep -q 'Microsoft' /proc/version ; then
	WNIX='wsl'
fi

# Header
echo
if [ "x${KCLIE_TEAM_OWNER_NAME}" != "x" ] ; then
	echo -e "   Owner/Sponsor : ${KCLIE_TEAM_OWNER_COLOR}${KCLIE_TEAM_OWNER_NAME}\033[0m"
fi
if [ "${WNIX}" = 'wsl' ] ; then
	echo -e "        Hostname : ${KCLIE_HOSTNAME_COLOR}`hostname`\033[0m\n"
else
	echo -e "        Hostname : ${KCLIE_HOSTNAME_COLOR}`hostname -f`\033[0m\n"
fi
if [ "x${KCLIE_TEAM_APP_NAME}" != "x" ] && [ "x${KCLIE_TEAM_APP_NAME}" != "x${KCLIE_TEAM_OWNER_NAME}" ] ; then
	echo -e "   3rd-party App : ${KCLIE_TEAM_APP_COLOR}${KCLIE_TEAM_APP_NAME}\033[0m"
fi
if [ "x${KCLIE_TEAM_ADMIN_NAME}" != "x" ] && [ "x${KCLIE_TEAM_ADMIN_NAME}" != "x${KCLIE_TEAM_OWNER_NAME}" ]; then
	echo -e "SysAdmim Hosting : ${KCLIE_TEAM_ADMIN_COLOR}${KCLIE_TEAM_ADMIN_NAME}\033[0m"
fi
if [ "x${KCLIE_TEAM_HOSTING_NAME}" != "x" ] && [ "x${KCLIE_TEAM_HOSTING_NAME}" != "x${KCLIE_TEAM_OWNER_NAME}" ]; then
	echo -e "Hardware Hosting : ${KCLIE_TEAM_HOSTING_COLOR}${KCLIE_TEAM_HOSTING_NAME}\033[0m"
fi

# hosting
if [ -r /root/.mdg ] ; then # OVH server
	echo
	echo -e "OVH server n°`cat /root/.mdg`"
fi

# hardware / virtual
echo
VCPU=""
if [ "${WNIX}" = 'osx' ] ; then
	sysctl -n hw.model
	echo "`sysctl -n machdep.cpu.brand_string` (`sysctl -n machdep.cpu.core_count` Cores)"
elif [ "${WNIX}" = 'wsl' ] ; then
	echo "Windows Subsystem for Linux (WSL)"
	VCPU="v"
elif [ -r /.dockerenv  ] ; then
	echo -e "Docker container `cat /proc/$$/cgroup | cut -d \/ -f 3 | sort | tail -n 1`"
	VCPU="v"
elif [ -r /proc/vz/veinfo ] ; then
	echo -e "OpenVZ container n°`awk '{print $1}' /proc/vz/veinfo`"
	VCPU="v"
elif [ -r /proc/$$/attr/current ] && (grep -qa 'lxc-container' /proc/$$/attr/current 2>/dev/null) ; then
	echo -e "LXC container"
	VCPU="v"
elif [ -r /sys/class/dmi/id/sys_vendor ] && (grep -q "QEMU" /sys/class/dmi/id/sys_vendor 2>/dev/null) ;then
	echo -e "QEMU/KVM Virtual Machine"
	VCPU="v"
elif [ -r /sys/class/dmi/id/sys_vendor ] && (grep -q "VMware" /sys/class/dmi/id/sys_vendor 2>/dev/null) ;then
	echo -e "VMware Virtual Machine"
	VCPU="v"
elif [ -r /sys/class/dmi/id/product_name ] && (grep -q "OpenStack" /sys/class/dmi/id/sys_vendor 2>/dev/null) ;then
	echo -e "`cat /sys/class/dmi/id/product_name` / `cat /sys/class/dmi/id/chassis_vendor` Virtual Machine"
	VCPU="v"
elif [ -r /sys/class/dmi/id/board_vendor ] ; then
	cat /sys/class/dmi/id/board_vendor
fi
if [ -r /proc/cpuinfo ] ; then
	read NBTHREADS NBCORES NBSOCKETS CPUINFO <<< $(LANG=C; awk -F ": " '
		/^processor/ {t++};
		/^cpu cores/ {c=$2};
		/^physical id/ {s=$2};
		/^model name/ {i=$2};
		END { print t,c*(s+1),s+1,i }' /proc/cpuinfo)
	SOCKETS="${NBSOCKETS} x "
	THREADS="${NBTHREADS} ${VCPU}Threads"
	CORES="${NBCORES} ${VCPU}Cores"
	if [ "${NBSOCKETS}" -eq "1" ] || [ "x${VCPU}" != "xv" ] ; then
		SOCKETS=""
	fi
	if [ "${NBCORES}" -eq "1" ] ; then
		CORES="${NBCORES} ${VCPU}Core"
	elif [ "${NBCORES}" -eq "0" ] || [ "${NBCORES}" -gt "${NBTHREADS}" ] ; then
		CORES=""
	fi
	if [ "${NBTHREADS}" -eq "${NBCORES}" ] ; then
		THREADS=""
	fi
	if [ "x${THREADS}" != "x" ] && [ "x${CORES}" != "x" ] ; then
		echo "${SOCKETS}${CPUINFO} (${THREADS} / ${CORES})"
	else
		echo "${SOCKETS}${CPUINFO} (${THREADS}${CORES})"
	fi
fi

# OS version
echo
if [ -e /etc/lsb-release ] ; then
	. /etc/lsb-release
	echo "${DISTRIB_ID} ${DISTRIB_CODENAME} ${DISTRIB_RELEASE} (${DISTRIB_DESCRIPTION})"
elif [ -r /etc/debian_version ] ; then
	echo "Debian `cat /etc/debian_version`"
elif [ -r /etc/gentoo-release ] ; then
	cat /etc/gentoo-release
elif [ -r /etc/redhat-release ] ; then
	cat /etc/redhat-release
elif [ -r /etc/fedora-release ] ; then
	cat /etc/fedora-release
elif [ "${WNIX}" = 'osx' ] ; then #OSX
	echo `/usr/bin/sw_vers -productName` `/usr/bin/sw_vers -productVersion` `/usr/bin/sw_vers -buildVersion`
else
	uname -s
fi
if [ "${WNIX}" = 'wsl' ] ; then
	echo "Kernel `cat /proc/version | cut -d \( -f1` `uname -m`"
else
	echo "Kernel `uname -srm`"
fi
echo

# Ip info
if [ "${WNIX}" = 'osx' ] ; then
	for IP in `ifconfig | grep inet | egrep -v "127.0.0.1|fe80::|6 ::1" | cut -d " " -f 2 | sort | uniq` ; do
		echo "ip ${IP}"
	done | sort | uniq
elif [ "${WNIX}" = 'linux' ] && [ -e /bin/ip ] ; then
	for IPV in '4' '6'; do
		for IP in `ip -${IPV} addr show 2>/dev/null | grep "global" | egrep "en|wl|ww|eth|ppp|vmbr|inet6" | sed -e 's/  / /g' | cut -d ' ' -f4`; do
			echo "ipv${IPV} ${IP}";
		done | sort | uniq
	done
elif [ -x /bin/hostname ]; then
	for IP in `hostname -I` ; do
		case "${IP}" in
			fe80\:\:*) ;; # ipv6 local
			2001\:0\:*) ;; # Teredo Tunneling Pseudo-Interface
			169\.254\.*) ;; # Automatic Private Internet Protocol Addressing
			0\.0\.0\.0*) ;; # ;)
			* )
              echo "ip ${IP}"
			;;
		esac
	done | sort | uniq
fi

# Uptime / load avg / mem
echo
if [ -e /proc/meminfo ] ; then
	if grep -q "MemAvailable:" /proc/meminfo ; then
		# kernel 3.14 and more
		awk '/MemTotal:/ {total=$2} /MemAvailable:/ {ava=$2
		printf "Mem Total: %.2fG, Used: %.2fG, Avail: %.2fG\n",total/1024/1024,(total-ava)/1024/1024,ava/1024/1024}' /proc/meminfo
	else
		# kernel less than 3.14
		awk '/MemTotal:/ {total=$2} /MemFree:/ {free=$2} /^Cached:/ {cache=$2} /^Shmem:/ {shm=$2
		printf "Mem Total: %.2fG, Used: %.2fG, Avail: %.2fG\n",total/1024/1024,(total-free-cache+shm)/1024/1024,(free+cache-shm)/1024/1024}' /proc/meminfo
	fi
fi
if [ -x /usr/bin/uptime ] ; then
	/usr/bin/uptime | sed -e 's/  / /g' | cut -d ' ' -f3,4,5,7-13
fi

# disk space
if [ -x /bin/df ] ; then
	echo

	if [ "${WNIX}" = 'osx' ] ; then
		/bin/df -hl 2>/dev/null
	elif [ "${WNIX}" = 'linux' ] || [ "${WNIX}" = 'cygwin' ] ; then
		/bin/df -hT -x tmpfs -x rootfs -x iso9660 -x debugfs -x fuse.mhddfs -x devtmpfs -x aufs -x squashfs 2>/dev/null | grep " " | awk 'NR<3{print $0;next}{print $0| "sort -k7"}'
	elif [ "${WNIX}" = 'wsl' ] ; then
		/bin/df -hT -x tmpfs -x lxfs 2>/dev/null
	fi
fi

# Sensors / Harddrive temperatures (if available)
HDDTEMP=''
if [ -x /usr/sbin/hddtemp ] ; then
	HDDLIST=$(lsblk -anpSo NAME 2>/dev/null)
	HDDTEMP=$(LANG=C; /usr/sbin/hddtemp ${HDDLIST} 2>/dev/null | grep -v 'not available' | awk -F ':'  '/:/ {print $1 $2":" $3; }' | column -ts ':')
fi
if [ -x /usr/bin/sensors ] ; then
	echo
	SENSORS=$(/usr/bin/sensors 2>/dev/null | grep ':' | grep '[0-9]' | cut -d\( -f1 | grep -v '0.0' | sed -e 's/ //g' -e 's/sensor=[a-z]*//g' | sort | column -ts ':')
	paste -d "|"  \
		<(echo "${SENSORS}" | egrep -i "°C|°F") \
		<(echo "${HDDTEMP}") \
		<(echo "${SENSORS}" | grep 'V') \
		<(echo "${SENSORS}" | grep 'RPM' | grep -v ':0RPM') \
	| sed -e 's/|/ |/g' | column -ts '|'

elif [ -x /usr/sbin/hddtemp ] ; then
	echo
	echo $HDDTEMP
fi

# OpenVZ contriners list (if available)
if [ -x /usr/sbin/vzlist ] ; then
	echo
	/usr/sbin/vzlist -a -o ctid,hostname,status,numproc,laverage
fi

# LXC containers list (if available)
if [ -x /usr/sbin/pct ] ; then
	echo
	/usr/sbin/pct list
fi

# QEMU VN list (if available)
if [ -x /usr/sbin/qm ] ; then
	echo
	/usr/sbin/qm list
fi

# Mail server queue (if available)
if [ -x /usr/bin/mailq ] ; then
	NB=`mailq 2>/dev/null | grep -c "^[A-F0-9]"`
	if [ "x$NB" != "x0" ] ; then
		echo "$NB emails in queue"
	fi
fi
echo

# OS Update notifier (if available
if [ -d /usr/lib/update-notifier ] ; then
	for info in `ls /usr/lib/update-notifier/update-motd-* 2>/dev/null` ; do
		$info 2>/dev/null
	done
	echo
fi

exit 0
