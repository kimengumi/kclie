#
# Kimengumi Command Line Interface Environnement (kclie)
#
# Licensed under the EUPL, Version 1.2 or â€“ as soon they will be approved by
# the European Commission - subsequent versions of the EUPL (the "Licence");
# You may not use this work except in compliance with the Licence.
# You may obtain a copy of the Licence at:
#
# https://joinup.ec.europa.eu/software/page/eupl
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the Licence is distributed on an "AS IS" basis,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the Licence for the specific language governing permissions and
# limitations under the Licence.
#
# @author Antonio Rossetti <antonio@rossetti.fr>
# @copyright since 2009 Antonio Rossetti
# @license <https://joinup.ec.europa.eu/software/page/eupl> EUPL
#

#
# ZSH profile
#

if [ ! -e ${HOME}/.zshrc ] ; then
	touch ${HOME}/.zshrc
fi

# ssh-agent (multiple ssh keys)
# Check if an agent already loaded (mostly desktop)
if [ "x${SSH_AUTH_SOCK}" = "x" ] ; then
    # Find running PID for user (non-gui terms)
    SSH_AGENT_FIND_PID="`pgrep -u ${USERNAME} ssh-agent | tail -n1`"
    if [ "x${SSH_AGENT_FIND_PID}" != "x" ] ; then
        # Retrieve socket from PID : Linux
        for SSH_AGENT_FIND_SOCK in `ls --color=never /tmp/ssh-*/agent.*.${SSH_AGENT_FIND_PID}` ; do
            export SSH_AUTH_SOCK="`cat ${SSH_AGENT_FIND_SOCK}`"
        done 2>/dev/null
        # Retrieve socket from PID : MacOs
        for SSH_AGENT_FIND_SOCK in `ls --color=never /var/folders/*/*/*/ssh-*/agent.*.${SSH_AGENT_FIND_PID}` ; do
            export SSH_AUTH_SOCK="`cat ${SSH_AGENT_FIND_SOCK}`"
        done 2>/dev/null
    # init only if ~/.ssh/use-ssh-agent file present
    elif [ -e ${HOME}/.ssh/use-ssh-agent ] ; then
        # start ssh-agent
        eval `ssh-agent` >/dev/null
        # Leave a file for simultaneous terminals retrieval
        echo ${SSH_AUTH_SOCK} > ${SSH_AUTH_SOCK}.${SSH_AGENT_PID}
    fi
fi

# history
export HISTSIZE=2000
export HISTFILE="${HOME}/.zshist_${USERNAME}_${SUDO_USER}"
export SAVEHIST=${HISTSIZE}
setopt hist_ignore_all_dups
setopt hist_ignore_space
setopt extendedglob

# If a local Oh My Zsh is detected, we use it
if [ -e $HOME/.oh-my-zsh/oh-my-zsh.sh ] ; then
elif [ -e $HOME/.ohmyzsh/oh-my-zsh.sh ] ; then

	# No default configuration in these case.

	# Else, if a shared installation is detected, we use it
elif [ -e ${KCLIE_PATH}/vendor/ohmyzsh/oh-my-zsh.sh ] ; then

	#Basic Oh My Zsh configuration for shared installation
	export ZSH=${KCLIE_PATH}/vendor/ohmyzsh/
	export ZSH_CACHE_DIR=${HOME}/.ohmyzsh/cache
	if [ ! -w ${ZSH_CACHE_DIR} ] ; then
		mkdir -p ${ZSH_CACHE_DIR}
	fi
	ZSH_THEME="candy"
	DISABLE_UPDATE_PROMPT=true
	DISABLE_AUTO_UPDATE=true
	plugins=(git)
	source ${ZSH}/oh-my-zsh.sh

	# If no Oh My Zsh,configuration of standard zsh prompt
else
	autoload -U compinit
	compinit
	setopt correctall
	setopt AUTOCD
	autoload -U promptinit
	promptinit
	PS1='%n%# '
	prompt bart
fi
