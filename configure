#!/bin/bash
#
# Kimengumi Command Line Interface Environnement (kclie)
#
# Licensed under the EUPL, Version 1.2 or â€“ as soon they will be approved by
# the European Commission - subsequent versions of the EUPL (the "Licence");
# You may not use this work except in compliance with the Licence.
# You may obtain a copy of the Licence at:
#
# https://joinup.ec.europa.eu/software/page/eupl
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the Licence is distributed on an "AS IS" basis,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the Licence for the specific language governing permissions and
# limitations under the Licence.
#
# @author Antonio Rossetti <antonio@kimengumi.fr>
# @copyright since 2009 Antonio Rossetti
# @license <https://joinup.ec.europa.eu/software/page/eupl> EUPL
#

#
# Install & configure / update utillity
#

WHITE="\033[1;97;49m"

# Init setup env & load pre-existing KCLIE env
export SETUP_PATH="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
if [ -e ${SETUP_PATH}/env ] ; then
  source ${SETUP_PATH}/env
fi

####
# INTERACTIVE PART
####
echo -e "\n\033[1;34;49mKimengumi Command Line Interface Environnement\033[0m\n"

# Color picker
if [ "x${KCLIE_TEAM_OWNER_COLOR}" = "x" ] || \
[ "x${KCLIE_TEAM_APP_COLOR}" = "x" ] || \
[ "x${KCLIE_TEAM_ADMIN_COLOR}" = "x" ] || \
[ "x${KCLIE_TEAM_HOSTING_COLOR}" = "x" ]|| \
[ "x${KCLIE_HOSTNAME_COLOR}" = "x" ] ; then

  echo -e "${WHITE}========== Installation wizard ==========\033[0m\n"
  echo "The following information asked bellow will be displayed"
  echo "in the KCLIE motd banner. All informations are optional."
  echo -e "\n\t\t\033[3mColor/Format Picker\033[0m"
  #Best Of
  for PFOR in `seq 30 37` ; do
    VIVID=`expr $PFOR + 60`
    for PSET in 3 4 1 7; do
      echo -ne " \033[${PSET};${PFOR};049m${PSET}${PFOR}049\033[0m"
      echo -ne " \033[${PSET};${VIVID};049m${PSET}${VIVID}049\033[0m"
    done
    echo
  done
  #Full
  #for PSET in  1 3 4 7 ; do
  #  for PFOR in `seq 30 37` `seq 90 97` ; do
  #    for PBAC in 049 `seq -w 040 047` `seq -w 100 107` ; do
  #      echo -ne " \033[${PSET};${PFOR};${PBAC}""m${PSET}${PFOR}${PBAC}\033[0m"
  #    done
  #    echo
  #  done
  #done
fi

# Tenant
if [ "x${KCLIE_TEAM_OWNER_NAME}" = "x" ] || [ "x${KCLIE_TEAM_OWNER_COLOR}" = "x" ] ; then
  echo -e "\n${WHITE}Owner / Sponsor\033[0m (payer)"
  read -p 'Name : ' SETUP_TEAM_OWNER_NAME
  if [ "x${SETUP_TEAM_OWNER_NAME}" != "x" ] ; then
    read -p $'Color/Format code \033[3m(use picker above)\033[0m: ' SETUP_TEAM_OWNER_COLOR
  fi
fi

# 3rd-party Application Management Team
if [ "x${KCLIE_TEAM_APP_NAME}" = "x" ] || [ "x${KCLIE_TEAM_APP_COLOR}" = "x" ] ; then
  echo -e "\n${WHITE}3rd-party Application Team\033[0m"
  read -p 'Name : ' SETUP_TEAM_APP_NAME
  if [ "x${SETUP_TEAM_APP_NAME}" != "x" ] ; then
    if [ "x${SETUP_TEAM_APP_NAME}" != "x${SETUP_TEAM_OWNER_NAME}" ] ; then
      read -p $'Color/Format code \033[3m(use picker above)\033[0m: ' SETUP_TEAM_APP_COLOR
    else
      SETUP_TEAM_APP_COLOR=${SETUP_TEAM_OWNER_COLOR}
    fi
  fi
fi

# Hosting management team
if [ "x${KCLIE_TEAM_ADMIN_NAME}" = "x" ] || [ "x${KCLIE_TEAM_ADMIN_COLOR}" = "x" ] ; then
  echo -e "\n${WHITE}System Administrators \033[0m (hosting management team)"
  read -p 'Name : ' SETUP_TEAM_ADMIN_NAME
  if [ "x${SETUP_TEAM_ADMIN_NAME}" != "x" ] ; then
    if [ "x${SETUP_TEAM_ADMIN_NAME}" != "x${SETUP_TEAM_APP_NAME}" ] ; then
      read -p $'Color/Format code \033[3m(use picker above)\033[0m: ' SETUP_TEAM_ADMIN_COLOR
    else
      SETUP_TEAM_ADMIN_COLOR=${SETUP_TEAM_APP_COLOR}
    fi
  fi
fi

# Physical hosting team
if [ "x${KCLIE_TEAM_HOSTING_NAME}" = "x" ] || [ "x${KCLIE_TEAM_HOSTING_COLOR}" = "x" ] ; then
  echo -e "\n${WHITE}Hardware Hosting Team\033[0m (physical)"
  read -p 'Name : ' SETUP_TEAM_HOSTING_NAME
  if [ "x${SETUP_TEAM_HOSTING_NAME}" != "x" ] ; then
    if [ "x${SETUP_TEAM_HOSTING_NAME}" != "x${SETUP_TEAM_ADMIN_NAME}" ] ; then
      read -p $'Color/Format code \033[3m(use picker above)\033[0m: ' SETUP_TEAM_HOSTING_COLOR
    else
      SETUP_TEAM_HOSTING_COLOR=${SETUP_TEAM_ADMIN_COLOR}
    fi
  fi
fi

# Host Color
if [ "x${KCLIE_HOSTNAME_COLOR}" = "x" ] ; then
  echo -e "\n${WHITE}Hostname\033[0m"
  read -p $'Color/Format code \033[3m(use picker above, default \033[0m\033[1;97;49m197049\033[0m\033[3m)\033[0m: ' SETUP_HOSTNAME_COLOR
fi

if [ "$(id -u)" != "0" ] ; then
  echo
  echo "The configuration script is not running as root."
  read -p "Do you want to configure KCLIE for the running user only ? [y/N] : " SETUP_USERMODE
  if [ "x${SETUP_USERMODE}" != "xy" ] ; then
    echo "To install KCLIE globaly to your systemn, please run the configure script as root"
    exit
  fi
fi

####
# AUTOMATED PART
####
echo -e "\n${WHITE}========== Setup / Upgrade ==========\033[0m"
echo -e "KCLIE directory is : ${SETUP_PATH}"

# Init env file
echo -e "${WHITE}Configuring KCLIE ...\033[0m"
if [ ! -e ${SETUP_PATH}/env ] ; then
  echo '#
  # Kimengumi Command Line Interface Environnement (kclie)
  #
  # Host configuration file
  #
  # This file must only contain KEY=VALUE lines.
  # Please do not use advanced shell script constructs!
  #
  ' > ${SETUP_PATH}/env || (echo "ERROR : can't write env file" ; exit)
  # Update path if moved
fi
if [ "x${SETUP_PATH}" != "x${KCLIE_PATH}" ] ; then
  echo "KCLIE_PATH=\"${SETUP_PATH}\"" >> ${SETUP_PATH}/env
fi
if [ "x${SETUP_TEAM_OWNER_NAME}" != "x" ] ; then
  echo "KCLIE_TEAM_OWNER_NAME=\"${SETUP_TEAM_OWNER_NAME}\"" >> ${SETUP_PATH}/env
fi
if [ "x${SETUP_TEAM_OWNER_COLOR}" != "x" ] ; then
  echo ${SETUP_TEAM_OWNER_COLOR} | awk '{printf "KCLIE_TEAM_OWNER_COLOR=\"\\033[%d;%d;%dm\"\n",substr($0,0,1),substr($0,2,2),substr($0,4,3)}' >> ${SETUP_PATH}/env
fi
if [ "x${SETUP_TEAM_APP_NAME}" != "x" ] ; then
  echo "KCLIE_TEAM_APP_NAME=\"${SETUP_TEAM_APP_NAME}\"" >> ${SETUP_PATH}/env
fi
if [ "x${SETUP_TEAM_APP_COLOR}" != "x" ] ; then
  echo ${SETUP_TEAM_APP_COLOR} | awk '{printf "KCLIE_TEAM_APP_COLOR=\"\\033[%d;%d;%dm\"\n",substr($0,0,1),substr($0,2,2),substr($0,4,3)}' >> ${SETUP_PATH}/env
fi
if [ "x${SETUP_TEAM_ADMIN_NAME}" != "x" ] ; then
  echo "KCLIE_TEAM_ADMIN_NAME=\"${SETUP_TEAM_ADMIN_NAME}\"" >> ${SETUP_PATH}/env
fi
if [ "x${SETUP_TEAM_ADMIN_COLOR}" != "x" ] ; then
  echo ${SETUP_TEAM_ADMIN_COLOR} | awk '{printf "KCLIE_TEAM_ADMIN_COLOR=\"\\033[%d;%d;%dm\"\n",substr($0,0,1),substr($0,2,2),substr($0,4,3)}' >> ${SETUP_PATH}/env
fi
if [ "x${SETUP_TEAM_HOSTING_NAME}" != "x" ] ; then
  echo "KCLIE_TEAM_HOSTING_NAME=\"${SETUP_TEAM_HOSTING_NAME}\"" >> ${SETUP_PATH}/env
fi
if [ "x${SETUP_TEAM_HOSTING_COLOR}" != "x" ] ; then
  echo ${SETUP_TEAM_HOSTING_COLOR} | awk '{printf "KCLIE_TEAM_HOSTING_COLOR=\"\\033[%d;%d;%dm\"\n",substr($0,0,1),substr($0,2,2),substr($0,4,3)}' >> ${SETUP_PATH}/env
fi
if [ "x${SETUP_HOSTNAME_COLOR}" != "x" ] ; then
  echo ${SETUP_HOSTNAME_COLOR} | awk '{printf "KCLIE_HOSTNAME_COLOR=\"\\033[%d;%d;%dm\"\n",substr($0,0,1),substr($0,2,2),substr($0,4,3)}' >> ${SETUP_PATH}/env
elif [ "x${KCLIE_HOSTNAME_COLOR}" = "x" ] ; then
  echo "KCLIE_HOSTNAME_COLOR=\"${WHITE}\"" >> ${SETUP_PATH}/env
fi
source ${SETUP_PATH}/env

# Vendor : Oh My ZSH
if [ -e ${SETUP_PATH}/vendor/oh-my-zsh/.git ] ; then
  echo -e "${WHITE}Remove OLD Oh My Zsh ...\033[0m"
  rm -rf ${SETUP_PATH}/vendor/oh-my-zsh
fi
if [ -e ${SETUP_PATH}/vendor/ohmyzsh/.git ] ; then
  echo -e "${WHITE}Updating Oh My Zsh ...\033[0m"
  (cd ${SETUP_PATH}/vendor/ohmyzsh && git pull && chmod -R og-w .)
elif [ -e /usr/bin/zsh ] ; then
  echo -e "${WHITE}Installing Oh My Zsh ...\033[0m"
  (cd ${SETUP_PATH}/vendor && git clone https://github.com/ohmyzsh/ohmyzsh.git --depth 1 && chmod -R og-w ohmyzsh)
fi

# Vendor : ps_mem
if [ -e ${SETUP_PATH}/vendor/ps_mem/.git ] ; then
  echo -e "${WHITE}Updating ps_mem ...\033[0m"
  (cd ${SETUP_PATH}/vendor/ps_mem && git pull)
else
  echo -e "${WHITE}Installing ps_mem ...\033[0m"
  (cd ${SETUP_PATH}/vendor && git clone https://github.com/pixelb/ps_mem.git --depth 1)
fi

#
# SETUP IN USER MODE
#
if [ "x${SETUP_USERMODE}" = "xy" ] ; then

  echo -e "${WHITE}Applying user shells customizations ...\033[0m"
  # PROFILE
  touch ~/.bash_profile
  for RC_BASH in ~/.profile ~/.bash_profile ~/.zshrc ; do
    if [ -w ${RC_BASH} ] && ! grep -q "\. ${SETUP_PATH}/env" ${RC_BASH} ; then
      echo ""  >> ${RC_BASH}
      echo "# Kimengumi Command Line Interface Environnement (kclie)"  >> ${RC_BASH}
      echo "set -a"  >> ${RC_BASH}
      echo ". ${SETUP_PATH}/env" >> ${RC_BASH}
      echo "set +a"  >> ${RC_BASH}
      echo '. ${KCLIE_PATH}/etc/profile' >> ${RC_BASH}
      echo 'if [ ! -z "$PS1" ] ; then ${KCLIE_PATH}/bin/motd ; fi' >> ${RC_BASH}
    fi
  done
  # ZSH SPECIFIC
  if [ -w ~/.zshrc ] && ! grep -q '${KCLIE_PATH}/etc/zsh/zshrc' ~/.zshrc ; then
    echo '. ${KCLIE_PATH}/etc/zsh/zshrc' >> ~/.zshrc
    echo '. ${KCLIE_PATH}/etc/zsh/zlogout' >> ~/.zlogout
  fi
  # TERMINAL CONF
  for RC_SKEL in .minttyrc .dircolors ; do
    if [ ! -e ~/${RC_SKEL} ] ; then
      cat ${SETUP_PATH}/etc/skel/${RC_SKEL} > ~/${RC_SKEL}
    fi
  done

  echo done ; exit
fi

#
# SETUP IN GLOBAL MODE
#

echo -e "${WHITE}Applying shells customizations ...\033[0m"
# PROFILE
for RC_BASH in /etc/bash.bashrc /etc/bashrc /etc/zsh/zshrc /etc/zshrc ; do
  if [ -w ${RC_BASH} ] && ! grep -q "\. ${SETUP_PATH}/etc/profile" ${RC_BASH} ; then
    echo ""  >> ${RC_BASH}
    echo "# Kimengumi Command Line Interface Environnement (kclie)"  >> ${RC_BASH}
    echo "set -a"  >> ${RC_BASH}
    echo ". ${SETUP_PATH}/env" >> ${RC_BASH}
    echo "set +a"  >> ${RC_BASH}
    echo ". ${SETUP_PATH}/etc/profile" >> ${RC_BASH}
  fi
done
# ZSH SPECIFIC
for ETC_ZSH_DIR in /etc/zsh/ /etc/ ; do
  if [ -w ${ETC_ZSH_DIR}/zshrc ] && ! grep -q "\. ${SETUP_PATH}/etc/zsh/zshrc" ${ETC_ZSH_DIR}/zshrc ; then
    echo ". ${SETUP_PATH}/etc/zsh/zshrc" >> ${ETC_ZSH_DIR}/zshrc
    echo ". ${SETUP_PATH}/etc/zsh/zlogout" >> ${ETC_ZSH_DIR}/zlogout
  fi

done

echo -e "${WHITE}Installing welcome banner ...\033[0m"
# Motd
if [ -w /etc/update-motd.d ] ; then
  # Ubuntu / Debian
  if [ ! -d /etc/update-motd.d.dist ] ; then
    mv /etc/update-motd.d /etc/update-motd.d.dist
    mkdir /etc/update-motd.d
  elif [ -L /etc/update-motd.d/0000-kclie ] ; then
    rm /etc/update-motd.d/0000-kclie
  fi
  echo -e "#!/bin/bash\n${SETUP_PATH}/bin/motd" > /etc/update-motd.d/0000-kclie
  chmod 755 /etc/update-motd.d/0000-kclie
elif [ -w /etc/cron.hourly ]; then
  # Other
  echo -e "#!/bin/bash
  ${SETUP_PATH}/bin/motd > /etc/motd 2>&1" > /etc/cron.hourly/kcliebanner
  chmod 755 /etc/cron.hourly/kcliebanner
  /etc/cron.hourly/kcliebanner
fi

# Ubuntu LightDm config
if [ -w '/usr/share/lightdm/lightdm.conf.d' ] ; then
  echo -e "${WHITE}Applying LightDM customization ...\033[0m"

  echo '[SeatDefaults]
  greeter-hide-users=true
  greeter-show-manual-login=true' > /usr/share/lightdm/lightdm.conf.d/99-kclie.conf
fi

echo -e "\033[1m\033[92;049mDone\033[0m"
